= Beetle Redis Failover

Automatic Redis Failover (+ consistency on network partitions)

== How it works

===Our current setup:

* Redis Server: redis-1 / redis-2, of them is our master (redis-1), the other a slave (redis-2)
* Rest of the beetle setup: messaging servers etc.

===How our failover works now:

* on the first need to reach our redis server we go through our configured redis instances and find our current redis master
* workers and publishers try to access this server as long as it is available
* when it is not reachable anymore or connection attempts end up in an exception we go into a retry loop
* if the loop finds an active master this becomes our current redis master again
* if the loop finds several active master it throws an exception and stops - this is to make sure we don't get inconsistent datasets

===Our problem(s):

* while this mechanism works for any master slave setup, the slave master nominations and changes do not happen automatically. Although this allows an admin to make sure everything is in order when he triggers a switch (+1 point) this has the unfortunate downside that the system will practically shutdown on redis failures until a manual switch has occured (-10000 points).
* (network partition tolerance relies on the admin correctly handling partitioning situations.)

===Our solution:

* one redis-coordinator process (on some server), dynamic redis-configuration in every worker process
* on startup, every worker asks the redis-coordinator for the current redis-master. this is also the registration process for the workers (they are added to the workers list of the redis-coordinator)
* if a worker cannot connect to the redis-coordinator or does not receive the redis-master info, it should do series of retries before exit with a proper message
* when the redis-coordinator finds the redis-master to be down he will do series of retries
* when the redis-master doesn't recover, the redis-coordinator will ask all known workers to reconfigure themselves to use the former redis-slave as the new redis-master
* from this moment on no changes are made to the workers list of the redis-coordinator, and every worker stops working by unsubscribing from every work queue (not from the redis-coordinator queue)
* every worker reconfigures itself to use the new redis-master and acknowledges the reconfiguration 
* when *all* workers have sent a message to acknowledge the reconfiguration, the redis-coordinator promotes the former redis-slave to become the new redis-master (by sending SLAVEOF no one) and sends a message to every worker to let them continue their work
* every worker starts working again by re-subscribing to the work queues
* starting new workers is now possible again
* TBD: how/when to remove/unregister dead workers from the redis-coordinator's workers list?
